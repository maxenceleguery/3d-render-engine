#include <iostream> 
#include "Vector.hpp"
#include "Camera.hpp"
#include "Pixel.hpp"
#include "Environment.hpp"
#include "Triangle.hpp"
#include "Matrix.hpp"
#include "Line.hpp"

void testTriangle() {
	std::cout << "Test Triangle :" << std::endl;
	Vector<float> ex = Vector(0.,0.,0.);
	Vector<float> ey = Vector(0.,0.,1.);
	Vector<float> ez = Vector(1.,1.,1.);
	Vector<float> vec = Vector(1.,1.,0.);
	Triangle triangle = Triangle(ex,Pixel(255,0,0));
	triangle.setvertex(1, ey);
	triangle.setvertex(2, ez);
	//triangle.print();
	//std::cout << "Normal vector : ";
	triangle.getNormalVector();//.printCoord();

	/*
	Vector<float> vec2 = Vector(0.6,0.5,0.5);
	if (triangle.isOnPlane(vec2))
		std::cout << "Point on plane" << std::endl;
	else
		std::cout << "Point not on plane" << std::endl;

	Vector<float> vec3 = Vector(0.5,0.5,10.);*/
}

void testMatrix() {
	std::cout << "Test Matrix :" << std::endl;
	Matrix<float> mat1 = Matrix(1.,2.,3.,1.,2.,3.,1.,2.,3.);
	Matrix<float> mat2 = Matrix(1.,MATRIX_EYE);
	Matrix<float> mat3 = Matrix(1.,2.,3.,0.,1.,4.,5.,6.,0.);
	Vector<float> vec1 = Vector(1.,2.,1.);
	/*
	(mat1+mat1).print();
	(mat1-mat1).print();
	(mat1*mat1).print();
	(mat1*10).print();
	(mat1.transpose()).print();
	(mat1*vec1).printCoord();
	std::cout << mat3.det() << std::endl;
	(mat3.inverse()).print();
	*/
}

void testLine() {
	std::cout << "Test Line :" << std::endl;
	Vector<float> vec1 = Vector(0.,1.,0.);
	Vector<float> vec2 = Vector(1.,-1.,0.);
	Vector<float> vec3 = Vector(0.,-2.,0.);
	Vector<float> vec4 = Vector(1.,1.,0.);
	Line l1 = Line(vec1,vec2);
	Line l2 = Line(vec3,vec4);
	std::cout << l1.IsIntersected(l2) << std::endl;
}

void testVector() {
	std::cout << "Test Vector :" << std::endl;
	Vector<float> vec1 = Vector(0. ,1., 0.);
	Vector<float> vec2 = Vector(1. ,0., 0.);
	if (std::abs(vec1.getAngle(vec2) - PI/2) > 1E-3) throw std::exception();

	Vector<float> vec3 = Vector(1. ,1., 0.);
	vec3.normalize();
	if (std::abs(vec3.normSquared() - 1) > 1E-5) throw std::exception();

	Vector<float> vec4 = Vector<float>(1.5, 1., -0.5);
	vec4.clamp(0.f, 1.f);
	vec4.printCoord();
}

void testFISQRT() {
	std::cout << "Test FISQRT :" << std::endl;
	for (long i = 0; i<100000000; i++) {
		Vector<float> vec(1., 1., 0);
		//vec.normalize();
		vec/=vec.norm();
	}
}

void testRandom() {
	std::cout << "Test Random :" << std::endl;
	RandomGenerator gen;

	float sum = 0;
	const uint N = 10000000;
	for (uint i=0; i<N; i++) {
		sum += gen.randomValue(5);
	}
	if (std::abs(sum/N - 0.5) > 1E-3) throw std::exception();
}

void testMaterial() {
	Vector<float> ray_dir = Vector<float>(0.1, -1, 0).normalize();
	Vector<float> normal = Vector<float>(0, 1, 0).normalize();
	RayInfo ray_info = {1.00023, false};
	Material mat = Material(Pixel(255, 255, 255), MaterialType::GLASS);
	Vector<float> dir = mat.trace(ray_dir, normal, ray_info, 77);
	dir.printCoord();
}

int main() {
    auto start = std::chrono::steady_clock::now();
	/*
	testTriangle();
	testMatrix();
	testLine();
	testVector();
    testRandom();
	testFISQRT();*/
	testMaterial();
	auto end = std::chrono::steady_clock::now();

	std::chrono::duration<float> elapsed_seconds = end-start;
    std::cout << "Tests all passed in " << elapsed_seconds.count() << std::endl;
	return EXIT_SUCCESS; 
}